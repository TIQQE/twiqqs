# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: twiqqs # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10

# you can overwrite defaults here
  stage: test
  environment: ${file(env.yml):${self:custom.stage}}
  region: eu-west-1
  deploymentBucket: 200709891512.deployment.bucket

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: 
        - arn:aws:dynamodb:eu-west-1:200709891512:table/twiqqsMessages-${self:custom.stage}*
        - arn:aws:dynamodb:eu-west-1:200709891512:table/twiqqsTopics-${self:custom.stage}*
        - arn:aws:dynamodb:eu-west-1:200709891512:table/twiqqsConnections-${self:custom.stage}*


# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

custom: 
  stage: ${opt:stage, self:provider.stage}
  twiqqsMessagesTableName: twiqqsMessages-${self:custom.stage}
  twiqqsTopicsTableName: twiqqsTopics-${self:custom.stage}
  twiqqsConnectionsTableName: twiqqsConnections-${self:custom.stage}
  userPool: arn:aws:cognito-idp:eu-west-1:200709891512:userpool/eu-west-1_UauzSA3TR
  webpack: 
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    includeModules: true   # Node modules configuration for packaging
    packager: 'npm'   # Packager that will be used to package your external modules

functions:
  getTwiqqs:
    handler: src/getTwiqqs/handler.get
    events:
      - http:
         path: twiqqs
         method: get
         cors: true
         authorizer: ${self:custom.userPool}
      - http:
         path: twiqqs/{topic}
         method: get
         cors: true
         authorizer: ${self:custom.userPool}
  postTwiqqs:
    handler: src/postTwiqqs/handler.post
    events:
     - http:
        path: twiqqs
        method: post
        cors: true
  listTopics:
    handler: src/listTopics/handler.list
    events:
     - http:
        path: topics
        method: get
        cors: true
  createTopic:
    handler: src/createTopic/handler.createTopic
    events:
     - http:
        path: topic
        method: post
        cors: true
        authorizer: ${self:custom.userPool}
  getConnections:
    handler: src/connections/handler.get
    events:
     - http:
        path: connections
        method: get
        cors: true
        authorizer: ${self:custom.userPool}
  websocketHandler:
    handler: src/websockets/handler.handler
    events:
      - websocket: $connect
      - websocket: $disconnect
      - websocket: $default

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}

plugins:
  - serverless-webpack
  - serverless-offline
